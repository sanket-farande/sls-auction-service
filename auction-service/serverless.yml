# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: sanketfarande2
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: auction-service
# "service" is the name of this project. This will also be added to your AWS resource names.
service: auction-service

# Exclude
package:
  patterns:
    - '!common/**'

# Webpack plugin for bundeling
plugins:
  - serverless-bundle

build:
  esbuild: false

# Application level
provider:
  name: aws
  runtime: nodejs20.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  # Environment variables at application level or function level
  environment:
    AUCTIONS_TABLE_NAME: ${self:custom.AuctionsTable.name}
    MAIL_QUEUE_URL: ${self:custom.MailQueue.url}
  # Access roles for the Lambdas based on Resources
  iam:
    role:
      statements:
        - ${file(iam/AuctionsTableIAM.yml):AuctionsTableIAM}
        - ${file(iam/MailQueueIAM.yml):MailQueueIAM}

resources:
  Resources:
  # Logical name key AuctionsTable as arn
    AuctionsTable: ${file(resources/AuctionsTable.yml):AuctionsTable}

# Function level
functions:
  createAuction:
    handler: src/handlers/createAuction.handler
    events:
      - http:
          method: POST
          path: /auction
          authorizer: auth

  getAuctions:
    handler: src/handlers/getAuctions.handler
    events:
      - http:
          method: GET
          path: /auctions
          authorizer: auth

  getAuction:
    handler: src/handlers/getAuction.handler
    events:
      - http:
          method: GET
          path: /auction/{id}
          authorizer: auth

  placeBid:
    handler: src/handlers/placeBid.handler
    events:
      - http:
          method: PATCH
          path: /auction/{id}/bid
          authorizer: auth

  processAuctions:
    handler: src/handlers/processAuctions.handler
    # events:
    #   - schedule : rate(1 minute)

# It should be seperate service all together so can be used across various applications
  auth:
    handler: src/handlers/auth.handler
    environment:
      AUTH0_PUBLIC_KEY: ${file(secret.pem)}

custom:
  AuctionsTable:
    # !Ref, !GetAtt Intrinsic functions as per AWS docs
    # Logical name (AuctionsTable) of resource
    name: !Ref AuctionsTable
    arn: !GetAtt AuctionsTable.Arn
  MailQueue:
    # Keys from the exported Outputs, cf - cloudformation
    arn: ${cf:notification-service-${self:provider.stage}.MailQueueArn}
    url: ${cf:notification-service-${self:provider.stage}.MailQueueUrl}
